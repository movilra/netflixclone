# source: https://us1.prisma.sh/alex-000a09/database/prueba
# timestamp: Fri Sep 14 2018 20:00:50 GMT-0500 (CDT)

type AggregateMovie {
  count: Int!
}

type AggregateRating {
  count: Int!
}

type AggregateSuscription {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum Categories {
  TVSHOW
  MOVIE
}

scalar DateTime

enum Genders {
  H
  M
}

enum Genres {
  HORROR
  COMEDY
  SCIFY
  DRAMA
  HISTORY
  MUSICAL
  BIO
  ANIMATION
  ACTION
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Movie implements Node {
  id: ID!
  title: String!
  category: Categories!
  sinopsis: String!
  rate: Rates!
  poster: String
  relased_date: DateTime!
  genre: Genres!
  length: Int!
  video_url: String!
  suscription_type: Suscriptions!
}

"""A connection to a list of items."""
type MovieConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  title: String!
  category: Categories!
  sinopsis: String!
  rate: Rates!
  poster: String
  relased_date: DateTime!
  genre: Genres!
  length: Int!
  video_url: String!
  suscription_type: Suscriptions!
}

input MovieCreateOneInput {
  create: MovieCreateInput
  connect: MovieWhereUniqueInput
}

"""An edge in a connection."""
type MovieEdge {
  """The item at the end of the edge."""
  node: Movie!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  category_ASC
  category_DESC
  sinopsis_ASC
  sinopsis_DESC
  rate_ASC
  rate_DESC
  poster_ASC
  poster_DESC
  relased_date_ASC
  relased_date_DESC
  genre_ASC
  genre_DESC
  length_ASC
  length_DESC
  video_url_ASC
  video_url_DESC
  suscription_type_ASC
  suscription_type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MoviePreviousValues {
  id: ID!
  title: String!
  category: Categories!
  sinopsis: String!
  rate: Rates!
  poster: String
  relased_date: DateTime!
  genre: Genres!
  length: Int!
  video_url: String!
  suscription_type: Suscriptions!
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MovieSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MovieSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MovieSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
}

input MovieUpdateDataInput {
  title: String
  category: Categories
  sinopsis: String
  rate: Rates
  poster: String
  relased_date: DateTime
  genre: Genres
  length: Int
  video_url: String
  suscription_type: Suscriptions
}

input MovieUpdateInput {
  title: String
  category: Categories
  sinopsis: String
  rate: Rates
  poster: String
  relased_date: DateTime
  genre: Genres
  length: Int
  video_url: String
  suscription_type: Suscriptions
}

input MovieUpdateOneRequiredInput {
  create: MovieCreateInput
  connect: MovieWhereUniqueInput
  update: MovieUpdateDataInput
  upsert: MovieUpsertNestedInput
}

input MovieUpsertNestedInput {
  update: MovieUpdateDataInput!
  create: MovieCreateInput!
}

input MovieWhereInput {
  """Logical AND on all given filters."""
  AND: [MovieWhereInput!]

  """Logical OR on all given filters."""
  OR: [MovieWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MovieWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  category: Categories

  """All values that are not equal to given value."""
  category_not: Categories

  """All values that are contained in given list."""
  category_in: [Categories!]

  """All values that are not contained in given list."""
  category_not_in: [Categories!]
  sinopsis: String

  """All values that are not equal to given value."""
  sinopsis_not: String

  """All values that are contained in given list."""
  sinopsis_in: [String!]

  """All values that are not contained in given list."""
  sinopsis_not_in: [String!]

  """All values less than the given value."""
  sinopsis_lt: String

  """All values less than or equal the given value."""
  sinopsis_lte: String

  """All values greater than the given value."""
  sinopsis_gt: String

  """All values greater than or equal the given value."""
  sinopsis_gte: String

  """All values containing the given string."""
  sinopsis_contains: String

  """All values not containing the given string."""
  sinopsis_not_contains: String

  """All values starting with the given string."""
  sinopsis_starts_with: String

  """All values not starting with the given string."""
  sinopsis_not_starts_with: String

  """All values ending with the given string."""
  sinopsis_ends_with: String

  """All values not ending with the given string."""
  sinopsis_not_ends_with: String
  rate: Rates

  """All values that are not equal to given value."""
  rate_not: Rates

  """All values that are contained in given list."""
  rate_in: [Rates!]

  """All values that are not contained in given list."""
  rate_not_in: [Rates!]
  poster: String

  """All values that are not equal to given value."""
  poster_not: String

  """All values that are contained in given list."""
  poster_in: [String!]

  """All values that are not contained in given list."""
  poster_not_in: [String!]

  """All values less than the given value."""
  poster_lt: String

  """All values less than or equal the given value."""
  poster_lte: String

  """All values greater than the given value."""
  poster_gt: String

  """All values greater than or equal the given value."""
  poster_gte: String

  """All values containing the given string."""
  poster_contains: String

  """All values not containing the given string."""
  poster_not_contains: String

  """All values starting with the given string."""
  poster_starts_with: String

  """All values not starting with the given string."""
  poster_not_starts_with: String

  """All values ending with the given string."""
  poster_ends_with: String

  """All values not ending with the given string."""
  poster_not_ends_with: String
  relased_date: DateTime

  """All values that are not equal to given value."""
  relased_date_not: DateTime

  """All values that are contained in given list."""
  relased_date_in: [DateTime!]

  """All values that are not contained in given list."""
  relased_date_not_in: [DateTime!]

  """All values less than the given value."""
  relased_date_lt: DateTime

  """All values less than or equal the given value."""
  relased_date_lte: DateTime

  """All values greater than the given value."""
  relased_date_gt: DateTime

  """All values greater than or equal the given value."""
  relased_date_gte: DateTime
  genre: Genres

  """All values that are not equal to given value."""
  genre_not: Genres

  """All values that are contained in given list."""
  genre_in: [Genres!]

  """All values that are not contained in given list."""
  genre_not_in: [Genres!]
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  video_url: String

  """All values that are not equal to given value."""
  video_url_not: String

  """All values that are contained in given list."""
  video_url_in: [String!]

  """All values that are not contained in given list."""
  video_url_not_in: [String!]

  """All values less than the given value."""
  video_url_lt: String

  """All values less than or equal the given value."""
  video_url_lte: String

  """All values greater than the given value."""
  video_url_gt: String

  """All values greater than or equal the given value."""
  video_url_gte: String

  """All values containing the given string."""
  video_url_contains: String

  """All values not containing the given string."""
  video_url_not_contains: String

  """All values starting with the given string."""
  video_url_starts_with: String

  """All values not starting with the given string."""
  video_url_not_starts_with: String

  """All values ending with the given string."""
  video_url_ends_with: String

  """All values not ending with the given string."""
  video_url_not_ends_with: String
  suscription_type: Suscriptions

  """All values that are not equal to given value."""
  suscription_type_not: Suscriptions

  """All values that are contained in given list."""
  suscription_type_in: [Suscriptions!]

  """All values that are not contained in given list."""
  suscription_type_not_in: [Suscriptions!]
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createRating(data: RatingCreateInput!): Rating!
  createSuscription(data: SuscriptionCreateInput!): Suscription!
  createMovie(data: MovieCreateInput!): Movie!
  createUser(data: UserCreateInput!): User!
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateSuscription(data: SuscriptionUpdateInput!, where: SuscriptionWhereUniqueInput!): Suscription
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteSuscription(where: SuscriptionWhereUniqueInput!): Suscription
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteUser(where: UserWhereUniqueInput!): User
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  upsertSuscription(where: SuscriptionWhereUniqueInput!, create: SuscriptionCreateInput!, update: SuscriptionUpdateInput!): Suscription!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyRatings(data: RatingUpdateInput!, where: RatingWhereInput): BatchPayload!
  updateManySuscriptions(data: SuscriptionUpdateInput!, where: SuscriptionWhereInput): BatchPayload!
  updateManyMovies(data: MovieUpdateInput!, where: MovieWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyRatings(where: RatingWhereInput): BatchPayload!
  deleteManySuscriptions(where: SuscriptionWhereInput): BatchPayload!
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  suscriptions(where: SuscriptionWhereInput, orderBy: SuscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suscription]!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  rating(where: RatingWhereUniqueInput!): Rating
  suscription(where: SuscriptionWhereUniqueInput!): Suscription
  movie(where: MovieWhereUniqueInput!): Movie
  user(where: UserWhereUniqueInput!): User
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  suscriptionsConnection(where: SuscriptionWhereInput, orderBy: SuscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuscriptionConnection!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Rates {
  A
  B
  C
  D
}

type Rating implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  movie(where: MovieWhereInput): Movie!
  rate: Float!
}

"""A connection to a list of items."""
type RatingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  rate: Float!
  user: UserCreateOneInput!
  movie: MovieCreateOneInput!
}

"""An edge in a connection."""
type RatingEdge {
  """The item at the end of the edge."""
  node: Rating!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  rate_ASC
  rate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RatingPreviousValues {
  id: ID!
  rate: Float!
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
}

input RatingUpdateInput {
  rate: Float
  user: UserUpdateOneRequiredInput
  movie: MovieUpdateOneRequiredInput
}

input RatingWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rate: Float

  """All values that are not equal to given value."""
  rate_not: Float

  """All values that are contained in given list."""
  rate_in: [Float!]

  """All values that are not contained in given list."""
  rate_not_in: [Float!]

  """All values less than the given value."""
  rate_lt: Float

  """All values less than or equal the given value."""
  rate_lte: Float

  """All values greater than the given value."""
  rate_gt: Float

  """All values greater than or equal the given value."""
  rate_gte: Float
  user: UserWhereInput
  movie: MovieWhereInput
}

input RatingWhereUniqueInput {
  id: ID
}

type Subscription {
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
  suscription(where: SuscriptionSubscriptionWhereInput): SuscriptionSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Suscription implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  suscription_type: Suscriptions!
  end_date: DateTime!
  price: Int!
}

"""A connection to a list of items."""
type SuscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SuscriptionEdge]!
  aggregate: AggregateSuscription!
}

input SuscriptionCreateInput {
  suscription_type: Suscriptions!
  end_date: DateTime!
  price: Int!
  user: UserCreateOneWithoutSuscriptionInput!
}

input SuscriptionCreateOneWithoutUserInput {
  create: SuscriptionCreateWithoutUserInput
  connect: SuscriptionWhereUniqueInput
}

input SuscriptionCreateWithoutUserInput {
  suscription_type: Suscriptions!
  end_date: DateTime!
  price: Int!
}

"""An edge in a connection."""
type SuscriptionEdge {
  """The item at the end of the edge."""
  node: Suscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SuscriptionOrderByInput {
  id_ASC
  id_DESC
  suscription_type_ASC
  suscription_type_DESC
  end_date_ASC
  end_date_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SuscriptionPreviousValues {
  id: ID!
  suscription_type: Suscriptions!
  end_date: DateTime!
  price: Int!
}

enum Suscriptions {
  FREE
  GOLD
  PREMIUM
}

type SuscriptionSubscriptionPayload {
  mutation: MutationType!
  node: Suscription
  updatedFields: [String!]
  previousValues: SuscriptionPreviousValues
}

input SuscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SuscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuscriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SuscriptionWhereInput
}

input SuscriptionUpdateInput {
  suscription_type: Suscriptions
  end_date: DateTime
  price: Int
  user: UserUpdateOneRequiredWithoutSuscriptionInput
}

input SuscriptionUpdateOneWithoutUserInput {
  create: SuscriptionCreateWithoutUserInput
  connect: SuscriptionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SuscriptionUpdateWithoutUserDataInput
  upsert: SuscriptionUpsertWithoutUserInput
}

input SuscriptionUpdateWithoutUserDataInput {
  suscription_type: Suscriptions
  end_date: DateTime
  price: Int
}

input SuscriptionUpsertWithoutUserInput {
  update: SuscriptionUpdateWithoutUserDataInput!
  create: SuscriptionCreateWithoutUserInput!
}

input SuscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SuscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  suscription_type: Suscriptions

  """All values that are not equal to given value."""
  suscription_type_not: Suscriptions

  """All values that are contained in given list."""
  suscription_type_in: [Suscriptions!]

  """All values that are not contained in given list."""
  suscription_type_not_in: [Suscriptions!]
  end_date: DateTime

  """All values that are not equal to given value."""
  end_date_not: DateTime

  """All values that are contained in given list."""
  end_date_in: [DateTime!]

  """All values that are not contained in given list."""
  end_date_not_in: [DateTime!]

  """All values less than the given value."""
  end_date_lt: DateTime

  """All values less than or equal the given value."""
  end_date_lte: DateTime

  """All values greater than the given value."""
  end_date_gt: DateTime

  """All values greater than or equal the given value."""
  end_date_gte: DateTime
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  user: UserWhereInput
}

input SuscriptionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  lastname: String!
  email: String!
  password: String!
  birth_date: DateTime!
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
  suscription(where: SuscriptionWhereInput): Suscription
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
  birth_date: DateTime!
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
  suscription: SuscriptionCreateOneWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSuscriptionInput {
  create: UserCreateWithoutSuscriptionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSuscriptionInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
  birth_date: DateTime!
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  birth_date_ASC
  birth_date_DESC
  gender_ASC
  gender_DESC
  status_ASC
  status_DESC
  paypal_id_ASC
  paypal_id_DESC
  avatar_ASC
  avatar_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  lastname: String!
  email: String!
  password: String!
  birth_date: DateTime!
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  lastname: String
  email: String
  password: String
  birth_date: DateTime
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
  suscription: SuscriptionUpdateOneWithoutUserInput
}

input UserUpdateInput {
  name: String
  lastname: String
  email: String
  password: String
  birth_date: DateTime
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
  suscription: SuscriptionUpdateOneWithoutUserInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutSuscriptionInput {
  create: UserCreateWithoutSuscriptionInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSuscriptionDataInput
  upsert: UserUpsertWithoutSuscriptionInput
}

input UserUpdateWithoutSuscriptionDataInput {
  name: String
  lastname: String
  email: String
  password: String
  birth_date: DateTime
  gender: Genders
  status: Boolean
  paypal_id: String
  avatar: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutSuscriptionInput {
  update: UserUpdateWithoutSuscriptionDataInput!
  create: UserCreateWithoutSuscriptionInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  birth_date: DateTime

  """All values that are not equal to given value."""
  birth_date_not: DateTime

  """All values that are contained in given list."""
  birth_date_in: [DateTime!]

  """All values that are not contained in given list."""
  birth_date_not_in: [DateTime!]

  """All values less than the given value."""
  birth_date_lt: DateTime

  """All values less than or equal the given value."""
  birth_date_lte: DateTime

  """All values greater than the given value."""
  birth_date_gt: DateTime

  """All values greater than or equal the given value."""
  birth_date_gte: DateTime
  gender: Genders

  """All values that are not equal to given value."""
  gender_not: Genders

  """All values that are contained in given list."""
  gender_in: [Genders!]

  """All values that are not contained in given list."""
  gender_not_in: [Genders!]
  status: Boolean

  """All values that are not equal to given value."""
  status_not: Boolean
  paypal_id: String

  """All values that are not equal to given value."""
  paypal_id_not: String

  """All values that are contained in given list."""
  paypal_id_in: [String!]

  """All values that are not contained in given list."""
  paypal_id_not_in: [String!]

  """All values less than the given value."""
  paypal_id_lt: String

  """All values less than or equal the given value."""
  paypal_id_lte: String

  """All values greater than the given value."""
  paypal_id_gt: String

  """All values greater than or equal the given value."""
  paypal_id_gte: String

  """All values containing the given string."""
  paypal_id_contains: String

  """All values not containing the given string."""
  paypal_id_not_contains: String

  """All values starting with the given string."""
  paypal_id_starts_with: String

  """All values not starting with the given string."""
  paypal_id_not_starts_with: String

  """All values ending with the given string."""
  paypal_id_ends_with: String

  """All values not ending with the given string."""
  paypal_id_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  suscription: SuscriptionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
